package frc.robot.commands;

import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj2.command.CommandBase;
import frc.robot.Constants;
import frc.robot.subsystems.ArmSubsystem;
import frc.robot.subsystems.IntakeSubsystem;
import frc.robot.subsystems.SwerveDriveSubsystem;

public
class AutoTwoGamePiece extends CommandBase {
	Timer timer = new Timer();
	SwerveDriveSubsystem swerveDriveSubsystem;
	ArmSubsystem armSubsystem;
	IntakeSubsystem intakeSubsystem;
	Boolean bSecondTime = false;

  public
	AutoTwoGamePiece(SwerveDriveSubsystem subsystem, ArmSubsystem arm, IntakeSubsystem intake) {
		addRequirements(subsystem);
		swerveDriveSubsystem = subsystem;
		addRequirements(arm);
		armSubsystem = arm;
		addRequirements(intake);
		intakeSubsystem = intake;
	}

	@Override public void initialize() {
		timer.reset();
		timer.start();
	}

  public
	void TwoGamePiece() {
		switch (Constants.eTwoGamePiece) {
		case none:
			break;

		case raiseArm:
			if (armSubsystem.armEncoder.getPosition() >
			    -270 /*Constants.maxLeadscrewRotations * 16 /*Gearbox ratio */) {
				armSubsystem.LiftArm(-0.6);

				if (armSubsystem.armEncoder.getPosition() > -200) {
					armSubsystem.ClawRotation(0.4);
				}
			} else {
				Constants.eTwoGamePiece = Constants.twoGamePieceEnum.extendArm;
				break;
			}

		case extendArm:
			armSubsystem.ExtendArm(true);
			Constants.eTwoGamePiece = Constants.twoGamePieceEnum.placePiece;
			break;

		case placePiece:
			timer.reset();
			timer.start();
			if (!timer.hasElapsed(0.2)) {
				armSubsystem.ClawRotation(-0.4);
			}
			if (!timer.hasElapsed(0.2 + 0.2)) {
				intakeSubsystem.ClawOutake();
			} else {
				timer.stop();
				timer.reset();
				if (!bSecondTime) {
					Constants.eTwoGamePiece = Constants.twoGamePieceEnum.driveToGamepiece;
				} else {
					Constants.eTwoGamePiece = Constants.twoGamePieceEnum.none;
					break;
				}
			}
		case driveToGamepiece:
			timer.start();
			if (!timer.hasElapsed(2.3)) {
				if (armSubsystem.armEncoder.getPosition() < -51) {
					armSubsystem.LiftArm(0.6);
				}
				swerveDriveSubsystem.driveFieldCentric(.5, 0, 0.2);
			} else {
				Constants.eTwoGamePiece = Constants.twoGamePieceEnum.pickupPiece;
				break;
			}

		case pickupPiece:
			timer.stop();
			timer.reset();
			if (armSubsystem.armEncoder.getPosition() > -80) {
				armSubsystem.LiftArm(-0.2);
				if (armSubsystem.clawEncoder.getPosition() <) {
					armSubsystem.ClawRotation(0.3);
				}
			} else {
				timer.start();
				if (timer.hasElapsed(0.2)) {
					intakeSubsystem.ClawIntake();
				} else {
					Constants.eTwoGamePiece = Constants.twoGamePieceEnum.driveToGrid;
					break;
				}
			}

		case driveToGrid:
			if (timer.hasElapsed(2.3 + 0.2)) {
				swerveDriveSubsystem.driveFieldCentric(-0.5, 0, -0.2);
			} else {
				bSecondTime = true;
				Constants.eTwoGamePiece = Constants.twoGamePieceEnum.raiseArm;
			}
		}
	}
}
